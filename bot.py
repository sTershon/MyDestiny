import os
from functools import wraps
import telebot
import time
import random
import threading

from telebot import types
from dotenv import load_dotenv
import re
import json, datetime


DB_FILE = "users.json"
LIKES_FILE = "likes.json"
REFS_FILE = "refs.json"

pending_questions = {}  # {user_id: target_id}
pending_answers = {}    # {user_id: (target_id, mode)}

# –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã
# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É
def load_data():
    global users, refs
    if os.path.exists(DB_FILE):
        with open(DB_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    else:
        users = {}

    if os.path.exists(REFS_FILE):
        with open(REFS_FILE, "r", encoding="utf-8") as f:
            refs = json.load(f)
    else:
        refs = {}

# ---------- —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã ----------
def save_data():
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)
    with open(REFS_FILE, "w", encoding="utf-8") as f:
        json.dump(refs, f, indent=4, ensure_ascii=False)


def fake_likes():
    if not users:
        return
    real_users = [uid for uid in users if not uid.startswith("fake_")]
    fake_users = [uid for uid in users if uid.startswith("fake_")]

    for fake in fake_users:
        if real_users:
            target = random.choice(real_users)
            if target not in likes:
                likes[target] = []
            if fake not in likes[target]:
                likes[target].append(fake)
    save_data()


# ---------- –§–ï–ô–ö–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ----------
def add_fake_users():
    fake_data = [
        {"name": "–ê–Ω—è", "age": 22, "city": "–ê–ª–º–∞—Ç—ã", "about": "–õ—é–±–ª—é —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –∏ –≥—É–ª—è—Ç—å ü•∞", "chance": 0.7},
        {"name": "–î–∏–º–∞", "age": 18, "city": "–ê—Å—Ç–∞–Ω–∞", "about": "–§–∞–Ω–∞—Ç —Å–ø–æ—Ä—Ç–∞ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π ‚úàÔ∏è", "chance": 0.3},
        {"name": "–ö–∞—Ç—è", "age": 25, "city": "–®—ã–º–∫–µ–Ω—Ç", "about": "–õ—é–±–ª—é –≥–æ—Ç–æ–≤–∏—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª—ã üç∞", "chance": 0.5},
        {"name": "–ò–≥–æ—Ä—å", "age": 21, "city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "about": "–†–∞–±–æ—Ç–∞—é –≤ IT, –ª—é–±–ª—é –∏–≥—Ä—ã üëæ", "chance": 0.2},
        {"name": "–°–∞—à–∞", "age": 21, "city": "–ö–æ–∫—à–µ—Ç–∞—É", "about": "–í–µ—Å—ë–ª—ã–π –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ üî•", "chance": 0.4},
        {"name": "–í–∞–ª–µ–Ω—Ç–∏–Ω", "age": 17, "city": "–ê—Å—Ç–∞–Ω–∞", "about": "–õ—é–±–ª—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –∫–æ–º–ø–æ–º üëæ", "chance": 0.2},
        {"name": "Deni", "age": 21, "city": "–ü–∞–≤–ª–æ–¥–∞—Ä", "about": "—Ö–∑ —á–µ —Å–∫–∞–∑–∞—Ç—å ", "chance": 0.4},
        {"name": "–õ–∞—Ä–∏—Å–∞", "age": 30, "city": "–†–∏–¥–¥–µ—Ä", "about": "–õ—é–±–ª—é —Å–∞–ª–∞—Ç—ã üëæ", "chance": 0.2},
        {"name": "–ì–æ–ª—É–±—å", "age": 20, "city": "–£—Ä–∞–ª—å—Å–∫", "about": "–û—Ç —Å–∫—É–∫–∏ ", "chance": 0.4},
        {"name": "–°–æ–ø–ª—è", "age": 19, "city": "–¢–∞—Ä–∞–∑", "about": "–ù–æ—Ä–º –±–æ—Ç üëæ", "chance": 0.2},
        {"name": "–ê–ª–∏–¥–∞–º–∏—Ä", "age": 18, "city": "–°–µ–º–µ–π", "about": "–ü–æ–∫–∞—Ç–∞–µ–º—Å—Å—è? ", "chance": 0.4},
        {"name": "–ò–≥–æ—Ä—é–Ω—è", "age": 21, "city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "about": "–•–∑ –∫—Ä—É—Ç–æ–π —á–µ–ª", "chance": 0.2},
        {"name": "–¢–æ—Ç —Å–∞–º—ã–π", "age": 21, "city": "–ö–æ—Å—Ç–∞–Ω–∞–π", "about": "–í–µ—Å—ë–ª—ã–π ", "chance": 0.4},
        {"name": "–£–∑–±–µ–∫", "age": 19, "city": "–ê–∫—Ç–∞—É", "about": "–†–∞–±–æ—Ç–∞—é", "chance": 0.2},
        {"name": "–ø–∞–ª–∞—Å", "age": 21, "city": "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫", "about": "–û–±—â–µ–Ω–∏–µ", "chance": 0.4},
        {"name": "–ú–∞–∫—Å–∏–º", "age": 20, "city": "–ö–æ–∫—Ç–æ–±–µ", "about": "–î–∂–µ–π—Å–æ–Ω —Å—Ç–µ—Ç—Ö–µ–º!", "chance": 0.2},
        {"name": "–°–µ—Ä–≥–µ–π", "age": 21, "city": "–ê–∫—Å—É", "about": "–õ—é–±–ª—é –ø–æ–º–∏–¥–æ—Ä—ã)", "chance": 0.4},
        {"name": "–ö–æ—Å—Ç—è)", "age": 19, "city": "–ü–∞–≤–ª–æ–¥–∞—Ä", "about": "–û–≤–æ—â–æ–µ–¥", "chance": 0.2},
        {"name": "–®–∞—É—Ä–º–∞", "age": 21, "city": "–ê—à—É", "about": "Hay gitlers!", "chance": 0.4},
        {"name": "–ü–µ—Ç—è", "age": 21, "city": "–ê–ª–º–∞—Ç–∞", "about": "–ü—Ä–∏–≤–µ—Ç –≥–æ –æ–±—â—é—Ö—É!", "chance": 0.4},
        {"name": "–ö–æ—Å—Ç—è–Ω", "age": 21, "city": "–ê—à—É", "about": "–ø–æ –≥–æ—Ä–æ–¥—É", "chance": 0.4},
        {"name": "–î—É–º–∫–∞", "age": 21, "city": "–ê—à—É", "about": "–ü–∏—à–∏—Ç–µ —É –º–µ–Ω—è –±–∞–Ω", "chance": 0.4},
    ]

    for i, profile in enumerate(fake_data, start=1):
        fake_id = f"fake_{i}"
        if fake_id not in users:
            users[fake_id] = {
                "name": profile["name"],
                "age": profile["age"],
                "city": profile["city"],
                "about": profile["about"],
                "photo": None,
                "premium": False,
                "step": "done",
                "chance": profile["chance"],  # —à–∞–Ω—Å –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            }
    save_data()


# ---------- –∑–∞–ø—É—Å–∫ ----------
load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω

# –•—Ä–∞–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –ª–∞–π–∫–∏
users = {}
likes = {}


load_data()

add_fake_users()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

user_likes = {}        # {user_id: [timestamps]}
blocked_users = {}     # {user_id: unblock_time}
invites_used = {}      # {invitee_id: inviter_id}
invite_links = {}      # {inviter_id: set(invitees)}
likes_count = {}       # {user_id: int}   
refs = {} 

LIKE_LIMIT = 5
BLOCK_TIME = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

CHANNEL_ID = "-1002748732031"  # username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ -100XXXXXXXXXXX
OWNER_ID = 7693086158  # <- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—ë —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ /myid
ADMIN_ID = 7693086158  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π


# ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ ----------
def like_user(user_id):
    now = time.time()
    me = bot.get_me()
    bot_username = me.username

    # –µ—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    if user_id in blocked_users:
        if now < blocked_users[user_id]:
            wait_time = int((blocked_users[user_id] - now) / 60)
            return f"üö´ –õ–∏–º–∏—Ç –ª–∞–π–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} –º–∏–Ω.\n" \
                   f"–ò–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É:\n" \
                   f"https://t.me/{bot_username}?start=invite_{user_id}"
        else:
            del blocked_users[user_id]
            likes_count[user_id] = 0

    # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∞–π–∫–∏
    likes_count[user_id] = likes_count.get(user_id, 0) + 1

    if likes_count[user_id] > LIKE_LIMIT:
        blocked_users[user_id] = now + BLOCK_TIME
        return f"‚ö†Ô∏è –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª {LIKE_LIMIT} –ª–∞–π–∫–æ–≤!\n" \
               f"–ü–æ–¥–æ–∂–¥–∏ 30 –º–∏–Ω—É—Ç –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n" \
               f"https://t.me/{bot_username}?start=invite_{user_id}"

    return "üíñ –õ–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω!"



# ---------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞ ----------
def add_like(user_id):
    now = time.time()
    user_likes.setdefault(user_id, []).append(now)


# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ ----------
def get_invite_link(user_id):
    return f"https://t.me/{bot.get_me().username}?start=invite_{user_id}"


# –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–µ—Ä–Ω—ë—Ç —Ç–≤–æ–π id (–∏—Å–ø–æ–ª—å–∑—É–π –≤ –ª–∏—á–∫–µ)
@bot.message_handler(commands=['myid'])
def cmd_myid(message):
    bot.reply_to(message, f"–¢–≤–æ–π chat.id: {message.chat.id}")

# –ü–æ–∫–∞–∂–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
@bot.message_handler(commands=['whoami'])
def cmd_whoami(message):
    me = bot.get_me()
    bot.reply_to(message, f"Bot username: @{me.username}\nBot id: {me.id}")

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ + –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
@bot.message_handler(commands=['check_channel'])
def cmd_check_channel(message):
    # –∑–∞—â–∏—Ç–∏–º –∫–æ–º–∞–Ω–¥—É ‚Äî —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü
    if message.from_user.id != OWNER_ID:
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    try:
        chat = bot.get_chat(CHANNEL_ID)
        info = f"Channel: {getattr(chat, 'title', 'no title')}\nID: {chat.id}\nType: {chat.type}"
        bot.reply_to(message, f"OK ‚Äî –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω.\n{info}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ get_chat: {e}")
        return

    try:
        me = bot.get_me()
        member = bot.get_chat_member(CHANNEL_ID, me.id)
        bot.reply_to(message, f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ get_chat_member: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–ø–¥–µ–π—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
@bot.message_handler(commands=['update'])
def cmd_update(message):
    if message.from_user.id != OWNER_ID:
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª.")
        return

    version = "1.3"
    changes = [
        "‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤",
        "üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞–≥–∏ —Å –∞–Ω–∫–µ—Ç–∞–º–∏",
        "üöÄ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–µ–π–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞"
    ]
    text = f"üöÄ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {version}</b>\n\n" + "\n".join(changes) + "\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ ‚ù§Ô∏è"

    try:
        bot.send_message(CHANNEL_ID, text, parse_mode="HTML")
        bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")

# ---------- –ö–æ–º–∞–Ω–¥–∞ /announce ----------
@bot.message_handler(commands=["announce"])
def announce_start(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return

    msg = bot.reply_to(message, "üì¢ –í–≤–µ–¥–∏ <b>–∑–∞–≥–æ–ª–æ–≤–æ–∫</b> –ø–æ—Å—Ç–∞:", parse_mode="HTML")
    bot.register_next_step_handler(msg, announce_get_title)


def announce_get_title(message):
    title = message.text
    msg = bot.reply_to(message, "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ <b>—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞</b>:", parse_mode="HTML")
    bot.register_next_step_handler(msg, announce_get_description, title)


def announce_get_description(message, title):
    description = message.text
    msg = bot.reply_to(message, "üîó –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —É–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ - –Ω–µ—Ç):")
    bot.register_next_step_handler(msg, announce_publish, title, description)


def announce_publish(message, title, description):
    link = message.text.strip()
    if link.lower() == "–Ω–µ—Ç":
        link = None

    # –ö—Ä–∞—Å–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞
    keyboard = None
    if link:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=link))

    text = f"üì¢ <b>{title}</b>\n\n{description}"

    try:
        bot.send_message(CHANNEL_ID, text, parse_mode="HTML", reply_markup=keyboard)
        bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# ---------- PREMIUM ----------
def give_premium(user_id, days):
    now = datetime.datetime.now()
    end_date = now + datetime.timedelta(days=days)
    users[user_id]["premium_until"] = end_date.strftime("%Y-%m-%d %H:%M:%S")
    save_data()

def check_premium(user_id):
    data = users.get(user_id, {})
    if "premium_until" in data:
        end_date = datetime.datetime.strptime(data["premium_until"], "%Y-%m-%d %H:%M:%S")
        return datetime.datetime.now() < end_date
    return False


# ---------- –î–ï–ö–û–†–ê–¢–û–† –ü–†–û–í–ï–†–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ----------
def require_registration(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        user_id = str(message.chat.id)
        if user_id not in users or users[user_id].get("step") != "done":
            bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π /start üòä")
            return
        return func(message, *args, **kwargs)
    return wrapper

# ---------- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ----------
def main_menu(user_id):
    data = users.get(str(user_id), {})
    name_display = data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    if data.get("premium"):
        name_display = f"üíé {name_display}"  # –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –ø—Ä–µ–º–∏—É–º

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üîç –ü–æ–∏—Å–∫")
    keyboard.add("‚ù§Ô∏è –ú–æ–∏ –ª–∞–π–∫–∏", "‚≠ê –ö—Ç–æ –ª–∞–π–∫–Ω—É–ª –º–µ–Ω—è")
    keyboard.add("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    keyboard.add("üíé –ü—Ä–µ–º–∏—É–º")
    return keyboard


# ---------- PREMIUM –ö–£–ü–ò–¢–¨ ----------
# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –ü–†–ï–ú–ò–£–ú ---
@bot.message_handler(func=lambda m: m.text == "üíé –ü—Ä–µ–º–∏—É–º")
@require_registration
def premium_info(message):
    user_id = str(message.chat.id)
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("1 –º–µ—Å—è—Ü ‚Äî 50‚≠ê", callback_data="buy_premium:1m"),
        types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ ‚Äî 120‚≠ê", callback_data="buy_premium:3m"),
        types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî 300‚≠ê", callback_data="buy_premium:life")
    )
    bot.send_message(
        user_id,
        "üíé *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚Ä¢ –í–∏–¥–µ—Ç—å –≤—Å–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏\n"
        "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ üëá",
        parse_mode="Markdown",
        reply_markup=kb
    )


# --- –í–´–ë–û–† –¢–ê–†–ò–§–ê ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_premium:"))
def buy_tariff(call):
    user_id = str(call.from_user.id)
    tariff = call.data.split(":")[1]

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_premium:{tariff}"))

    bot.send_message(
        user_id,
        f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ *{tariff}* –ø–µ—Ä–µ–≤–µ–¥–∏ –∑–≤—ë–∑–¥—ã –Ω–∞ @abonentan ‚ú®\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        parse_mode="Markdown",
        reply_markup=kb
    )


# ---------- –ö–û–ú–ê–ù–î–ê –ü–†–û–í–ï–†–ö–ò ----------
@bot.message_handler(commands=['mypremium'])
def mypremium(message):
    user_id = str(message.chat.id)
    if check_premium(user_id):
        end_date = users[user_id]["premium_until"]
        bot.send_message(message.chat.id, f"‚ú® –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–µ–Ω Premium –¥–æ {end_date}")
    else:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç Premium. –ö—É–ø–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.")


# --- –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–ü–õ–ê–¢–´ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_premium:"))
def confirm_premium(call):
    user_id = str(call.from_user.id)
    tariff = call.data.split(":")[1]

    users[user_id]["premium"] = True
    users[user_id]["premium_until"] = "lifetime" if tariff == "life" else tariff
    save_data()

    bot.send_message(user_id, "üéâ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üíé")

# ---------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ----------
import time

LIKE_LIMIT = 5  # –ª–∏–º–∏—Ç –ª–∞–π–∫–æ–≤
BLOCK_TIME = 1800  # 30 –º–∏–Ω—É—Ç

refs = {}  # { inviter_id: [—Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö] }

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ---
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    args = message.text.split()

    # –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤–∏–¥–∞ /start invite_12345
    if len(args) > 1 and args[1].startswith("invite_"):
        inviter_id = args[1].replace("invite_", "")
        if inviter_id != user_id:
            refs.setdefault(inviter_id, [])
            if user_id not in refs[inviter_id]:
                refs[inviter_id].append(user_id)
                # —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                if inviter_id in blocked_users:
                    del blocked_users[inviter_id]
                bot.send_message(inviter_id, f"üéâ –ö —Ç–µ–±–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –¥—Ä—É–≥ @{message.from_user.username or user_id}, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞!")

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if user_id not in users or users[user_id].get("step") != "done":
        users[user_id] = {}
        save_data()
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòä\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(message, get_name)
        return

    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=main_menu(user_id))

def get_name(message):
    user_id = str(message.chat.id)
    users[user_id] = {
        "name": message.text,
        "username": message.from_user.username  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º username
    }
    save_data()
    bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, get_age)

def get_age(message):
    user_id = str(message.chat.id)
    if message.text and message.text.isdigit():
        age = int(message.text)
        if 0 < age <= 100:
            users[user_id]["age"] = age
            save_data()
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            button_geo = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
            keyboard.add(button_geo)
            bot.send_message(user_id, "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? (–º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é)", reply_markup=keyboard)
            bot.register_next_step_handler(message, get_city)
            return
    bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 1 –¥–æ 100")
    bot.register_next_step_handler(message, get_age)



def get_city(message):
    user_id = str(message.chat.id)
    if message.content_type == "location":
        lat = message.location.latitude
        lon = message.location.longitude
        users[user_id]["city"] = f"üìç {lat:.4f}, {lon:.4f}"  
        save_data()
        bot.send_message(user_id, "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚úçÔ∏è", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_about)
        return

    if message.text and re.match(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+$", message.text):
        users[user_id]["city"] = message.text.strip()
        save_data()
        bot.send_message(user_id, "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚úçÔ∏è", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_about)
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã).")
        bot.register_next_step_handler(message, get_city)

def get_about(message):
    user_id = str(message.chat.id)
    users[user_id]["about"] = message.text
    save_data()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    bot.send_message(user_id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã üì∏\n(–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª)", reply_markup=keyboard)
    bot.register_next_step_handler(message, get_photo)

def get_photo(message):
    user_id = str(message.chat.id)
    if message.content_type == "photo":
        users[user_id]["photo"] = message.photo[-1].file_id
        users[user_id]["step"] = "done"
        save_data()
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu(user_id))
        return

    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        users[user_id]["photo"] = None
        users[user_id]["step"] = "done"
        save_data()
        bot.send_message(user_id, "–•–æ—Ä–æ—à–æ, –±–µ–∑ —Ñ–æ—Ç–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ üôÇ\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu(user_id))
        return

    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª üôÇ")
    bot.register_next_step_handler(message, get_photo)


# ---------- –ü–†–û–§–ò–õ–¨ –ò –ü–û–ò–°–ö ----------
def profile_keyboard(user_id, liked=False):
    keyboard = types.InlineKeyboardMarkup()
    if liked:
        like_btn = types.InlineKeyboardButton("‚úÖ –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data="liked")
    else:
        like_btn = types.InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{user_id}")
    keyboard.add(like_btn)
    keyboard.add(types.InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=f"ask:{user_id}"))
    keyboard.add(types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next"))
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data.startswith("like_"))
def callback_like(call):
    target_id = call.data.split("_")[1]
    liker_id = str(call.from_user.id)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤
    if "likes_today" not in users[liker_id]:
        users[liker_id]["likes_today"] = 0
    if users[liker_id]["likes_today"] >= 5:
        blocked_until = users[liker_id].get("blocked_until")
        if not blocked_until:
            users[liker_id]["blocked_until"] = time.time() + 1800  # 30 –º–∏–Ω
            save_data()
            blocked_until = users[liker_id]["blocked_until"]

        if time.time() < blocked_until:
            wait_minutes = int((blocked_until - time.time()) // 60)
            invite_link = f"https://t.me/{bot.get_me().username}?start={liker_id}"
            bot.send_message(
                liker_id,
                f"‚õî –£ —Ç–µ–±—è –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç (5 –ª–∞–π–∫–æ–≤). –ü–æ–¥–æ–∂–¥–∏ {wait_minutes} –º–∏–Ω.\n\n"
                f"–ò–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É:\n{invite_link}"
            )
            return

    # –µ—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º ‚Üí –ª–∞–π–∫
    users[liker_id]["likes_today"] += 1
    save_data()
    bot.send_message(liker_id, f"‚ù§Ô∏è –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")

def show_profile(chat_id, user_id, viewer_id=None):
    data = users.get(str(user_id), {})
    if not data:
        bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    premium_icon = "üíé " if data.get("premium") else ""
    caption = (
        f"{premium_icon}üë§ –ò–º—è: {data.get('name', '-')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '?')} –ª–µ—Ç\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data.get('city', '-')}\n"
        f"üìù –û —Å–µ–±–µ:\n{data.get('about', '-')}"
    )

    # –ö–Ω–æ–ø–∫–∏
    if viewer_id and str(viewer_id) == str(user_id):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚¨ÖÔ∏è –í –º–µ–Ω—é")
    else:
        kb = profile_keyboard(user_id)  # –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

    photo = data.get("photo")
    if photo:
        bot.send_photo(chat_id, photo, caption=caption, reply_markup=kb)
    else:
        bot.send_message(chat_id, caption, reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("ask:"))
def callback_ask_question(call):
    target_id = call.data.split(":")[1]  # –∫–æ–º—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    asker_id = str(call.from_user.id)

    pending_questions[asker_id] = target_id
    msg = bot.send_message(asker_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, process_question)

def process_question(message):
    asker_id = str(message.from_user.id)
    if asker_id not in pending_questions:
        bot.send_message(asker_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    target_id = pending_questions.pop(asker_id)
    question_text = message.text

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data=f"answer:{asker_id}:anon"),
        types.InlineKeyboardButton("üë§ –û—Ç–≤–µ—Ç–∏—Ç—å —Å –∏–º–µ–Ω–µ–º", callback_data=f"answer:{asker_id}:named")
    )

    bot.send_message(
        target_id,
        f"‚ùì –í–∞–º –ø—Ä–∏—à—ë–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n\n{question_text}",
        reply_markup=keyboard
    )
    bot.send_message(asker_id, "‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# ---------- –û–¢–í–ï–¢–´ ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def callback_answer_question(call):
    _, target_id, mode = call.data.split(":")  # target_id = –∫—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
    responder_id = str(call.from_user.id)

    pending_answers[responder_id] = (target_id, mode)
    msg = bot.send_message(responder_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")
    bot.register_next_step_handler(msg, process_answer)

def process_answer(message):
    responder_id = str(message.from_user.id)
    if responder_id not in pending_answers:
        bot.send_message(responder_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")
        return

    target_id, mode = pending_answers.pop(responder_id)
    text = message.text
    responder_name = message.from_user.first_name

    if mode == "anon":
        answer_text = f"üì© –í–∞–º –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç (–∞–Ω–æ–Ω–∏–º–Ω–æ):\n\n{text}"
    else:
        answer_text = f"üì© –í–∞–º –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç –æ—Ç {responder_name}:\n\n{text}"

    bot.send_message(target_id, answer_text)
    bot.send_message(responder_id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# --- –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã ---
seen_profiles = {}  # {user_id: [list of viewed ids]}


# ---------- –ü–û–ò–°–ö ----------
@bot.message_handler(func=lambda m: m.text == "üîç –ü–æ–∏—Å–∫")
@require_registration
def search(message):
    user_id = str(message.chat.id)

    # –µ—Å–ª–∏ —é–∑–µ—Ä –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –ø–æ–∏—Å–∫ ‚Äî —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫
    if user_id not in seen_profiles:
        seen_profiles[user_id] = []

    # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: –≤—Å–µ –∫—Ä–æ–º–µ —Å–µ–±—è
    candidates = [uid for uid in users if uid != user_id]

    # —É–±–∏—Ä–∞–µ–º —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    candidates = [c for c in candidates if c not in seen_profiles[user_id]]

    if not candidates:
        bot.send_message(user_id, "–¢—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –∞–Ω–∫–µ—Ç—ã ü§∑")
        return

    # –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    candidate_id = candidates[0]

    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
    seen_profiles[user_id].append(candidate_id)

    show_profile(user_id, candidate_id)


# ---------- –õ–ê–ô–ö–ò ----------


# ---------- ‚ù§Ô∏è –ú–æ–∏ –ª–∞–π–∫–∏ ----------
# –ú–æ–∏ –ª–∞–π–∫–∏
@bot.message_handler(func=lambda m: m.text == "‚ù§Ô∏è –ú–æ–∏ –ª–∞–π–∫–∏")
def my_likes(message):
    user_id = str(message.chat.id)
    liked_users = likes.get(user_id, [])

    if not liked_users:
        bot.send_message(user_id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ª–∞–π–∫–æ–≤.")
        return

    keyboard = types.InlineKeyboardMarkup()
    for uid in liked_users:
        data = users.get(str(uid), {})
        name = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        username = data.get("username")

        if username:  # –µ—Å–ª–∏ –µ—Å—Ç—å username ‚Üí —Å—Å—ã–ª–∫–∞
            btn = types.InlineKeyboardButton(text=name, url=f"https://t.me/{username}")
        else:  # –µ—Å–ª–∏ username –Ω–µ—Ç ‚Üí –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID
            btn = types.InlineKeyboardButton(text=f"{name} (–Ω–µ—Ç username)", callback_data=f"show_id_{uid}")

        keyboard.add(btn)

    bot.send_message(user_id, "–¢–≤–æ–∏ –ª–∞–π–∫–∏:", reply_markup=keyboard)



@bot.message_handler(func=lambda m: m.text == "‚≠ê –ö—Ç–æ –ª–∞–π–∫–Ω—É–ª –º–µ–Ω—è")
def liked_me(message):
    user_id = str(message.chat.id)
    who_liked = [uid for uid, liked in likes.items() if user_id in liked]

    if not who_liked:
        bot.send_message(user_id, "–¢–µ–±—è –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª.")
        return

    keyboard = types.InlineKeyboardMarkup()
    for uid in who_liked:
        data = users.get(str(uid), {})
        name = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –ø—Ä–µ–º–∏—É–º–∞
        if data.get("premium"):
            name = f"üíé {name}"

        username = data.get("username")
        if username:
            btn = types.InlineKeyboardButton(text=name, url=f"https://t.me/{username}")
        else:
            btn = types.InlineKeyboardButton(text=f"{name} (–Ω–µ—Ç username)", callback_data=f"show_id_{uid}")

    keyboard.add(btn)

    bot.send_message(user_id, "–¢–≤–æ–∏ –ø–æ–∫–ª–æ–Ω–Ω–∏–∫–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ username (–ø–æ–∫–∞–∑ ID)
@bot.callback_query_handler(func=lambda call: call.data.startswith("show_id_"))
def callback_show_id(call):
    uid = call.data.split("_")[2]
    bot.answer_callback_query(call.id, text=f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {uid}")




# ---------- –ü–û–ö–ê–ó –ü–†–û–§–ò–õ–Ø –ò–ó "–ö–¢–û –õ–ê–ô–ö–ù–£–õ –ú–ï–ù–Ø" ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("show_"))
def show_fan_profile(call):
    user_id = str(call.message.chat.id)
    target_id = call.data.split("_")[1]
    show_profile(user_id, target_id)

# ---------- –ú–û–ô –ü–†–û–§–ò–õ–¨ ----------
@bot.message_handler(func=lambda m: m.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
@require_registration
def my_profile(message):
    user_id = str(message.chat.id)
    show_profile(user_id, user_id, viewer_id=user_id)
    


# ---------- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ----------
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
@require_registration
def edit_profile(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç")
    kb.add("üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
    kb.add("üìñ –ò–∑–º–µ–Ω–∏—Ç—å '–û —Å–µ–±–µ'")
    kb.add("‚¨ÖÔ∏è –í –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)

# ---------- –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ----------
def set_step(user_id, step):
    users[user_id]["step"] = step
    save_data()

@bot.message_handler(func=lambda m: m.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
@require_registration
def change_name(message):
    set_step(str(message.chat.id), "edit_name")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:")

@bot.message_handler(func=lambda m: users.get(str(m.chat.id), {}).get("step") == "edit_name")
def save_name(message):
    user_id = str(message.chat.id)
    users[user_id]["name"] = message.text
    set_step(user_id, "done")
    save_data()
    bot.send_message(message.chat.id, "‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

@bot.message_handler(func=lambda m: m.text == "üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç")
@require_registration
def change_age(message):
    set_step(str(message.chat.id), "edit_age")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")

@bot.message_handler(func=lambda m: users.get(str(m.chat.id), {}).get("step") == "edit_age")
def save_age(message):
    user_id = str(message.chat.id)
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    users[user_id]["age"] = int(message.text)
    set_step(user_id, "done")
    bot.send_message(message.chat.id, "‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.message_handler(func=lambda m: m.text == "üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
@require_registration
def change_city(message):
    set_step(str(message.chat.id), "edit_city")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")

@bot.message_handler(func=lambda m: users.get(str(m.chat.id), {}).get("step") == "edit_city")
def save_city(message):
    user_id = str(message.chat.id)
    users[user_id]["city"] = message.text
    set_step(user_id, "done")
    bot.send_message(message.chat.id, "‚úÖ –ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.message_handler(func=lambda m: m.text == "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
@require_registration
def change_photo(message):
    set_step(str(message.chat.id), "edit_photo")
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")

@bot.message_handler(content_types=["photo"])
def save_photo(message):
    user_id = str(message.chat.id)
    if users.get(user_id, {}).get("step") == "edit_photo":
        users[user_id]["photo"] = message.photo[-1].file_id
        set_step(user_id, "done")
        bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

@bot.message_handler(func=lambda m: m.text == "üìñ –ò–∑–º–µ–Ω–∏—Ç—å '–û —Å–µ–±–µ'")
@require_registration
def change_about(message):
    set_step(str(message.chat.id), "edit_about")
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

@bot.message_handler(func=lambda m: users.get(str(m.chat.id), {}).get("step") == "edit_about")
def save_about(message):
    user_id = str(message.chat.id)
    users[user_id]["about"] = message.text
    set_step(user_id, "done")
    bot.send_message(message.chat.id, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "‚¨ÖÔ∏è –í –ú–ï–ù–Æ" ----------
@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
@require_registration
def back_to_menu(message):
    user_id = str(message.chat.id)
    bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(user_id))

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –õ–ê–ô–ö–û–í ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("like_"))
def like_profile(call):
    user_id = str(call.message.chat.id)
    target_id = call.data.split("_", 1)[1]

    likes.setdefault(user_id, []).append(target_id)

    target = users.get(target_id, {})
    me = users.get(user_id, {})

    # --- —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω—è ---
    if call.from_user.username:
        me_link = f'<a href="https://t.me/{call.from_user.username}">{me.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}</a>'
    else:
        me_link = f'<a href="tg://user?id={user_id}">{me.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}</a>'

    # --- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
    try:
        if not str(target_id).startswith("fake_"):
            bot.send_message(
                int(target_id),
                f"üíå –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å {me_link}!",
                parse_mode="HTML"
            )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {target_id}: {e}")

    # --- –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç —Ñ–µ–π–∫–æ–≤ ---
    if str(target_id).startswith("fake_"):
        import random
        chance = target.get("chance", 0.5)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50%
        if random.random() < chance:
            likes.setdefault(target_id, []).append(user_id)
            bot.send_message(
                user_id,
                f"üéâ –£ —Ç–µ–±—è –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å {target.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!",
                parse_mode="HTML"
            )
            return

    # --- –µ—Å–ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º ---
    if user_id in likes.get(target_id, []):
        if call.from_user.username:
            target_link = f'<a href="https://t.me/{call.from_user.username}">{target.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}</a>'
        else:
            target_link = f'<a href="tg://user?id={target_id}">{target.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}</a>'

        bot.send_message(user_id, f"üéâ –£ —Ç–µ–±—è –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å {target_link}!", parse_mode="HTML")

        if not str(target_id).startswith("fake_"):
            bot.send_message(target_id, f"üéâ –£ —Ç–µ–±—è –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å {me_link}!", parse_mode="HTML")

    search(call.message)


@bot.callback_query_handler(func=lambda call: call.data == "next")
def next_profile(call):
    search(call.message)

def schedule_fake_likes():
    fake_likes()
    threading.Timer(300, schedule_fake_likes).start()  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

schedule_fake_likes()

@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    # –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ next_step_handler ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if message.text.startswith("/"):  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /menu")

# ---------- –ó–ê–ü–£–°–ö –ë–û–¢–ê ----------

bot.polling(none_stop=True)

