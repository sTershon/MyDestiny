import os
from functools import wraps
import telebot
from telebot import types
from dotenv import load_dotenv
import re  # –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞
import json, os, datetime

DB_FILE = "users.json"
LIKES_FILE = "likes.json"

pending_questions = {}  # {user_id: target_id}
pending_answers = {}    # {user_id: (target_id, mode)}

# –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã
def load_data():
    global users, likes
    if os.path.exists(DB_FILE):
        with open(DB_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    else:
        users = {}

    if os.path.exists(LIKES_FILE):
        with open(LIKES_FILE, "r", encoding="utf-8") as f:
            likes = json.load(f)
    else:
        likes = {}

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã
def save_data():
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)
    with open(LIKES_FILE, "w", encoding="utf-8") as f:
        json.dump(likes, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –ª–∞–π–∫–∏
users = {}
likes = {}


# ---------- PREMIUM ----------
def give_premium(user_id, days):
    now = datetime.datetime.now()
    end_date = now + datetime.timedelta(days=days)
    users[user_id]["premium_until"] = end_date.strftime("%Y-%m-%d %H:%M:%S")
    save_data()

def check_premium(user_id):
    data = users.get(user_id, {})
    if "premium_until" in data:
        end_date = datetime.datetime.strptime(data["premium_until"], "%Y-%m-%d %H:%M:%S")
        return datetime.datetime.now() < end_date
    return False


# ---------- –î–ï–ö–û–†–ê–¢–û–† –ü–†–û–í–ï–†–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ----------
def require_registration(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        user_id = str(message.chat.id)
        if user_id not in users or users[user_id].get("step") != "done":
            bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π /start üòä")
            return
        return func(message, *args, **kwargs)
    return wrapper

# ---------- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ----------
def main_menu(user_id):
    data = users.get(str(user_id), {})
    name_display = data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    if data.get("premium"):
        name_display = f"üíé {name_display}"  # –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –ø—Ä–µ–º–∏—É–º

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üîç –ü–æ–∏—Å–∫")
    keyboard.add("‚ù§Ô∏è –ú–æ–∏ –ª–∞–π–∫–∏", "‚≠ê –ö—Ç–æ –ª–∞–π–∫–Ω—É–ª –º–µ–Ω—è")
    keyboard.add("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    keyboard.add("üíé –ü—Ä–µ–º–∏—É–º")
    return keyboard


# ---------- PREMIUM –ö–£–ü–ò–¢–¨ ----------
# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –ü–†–ï–ú–ò–£–ú ---
@bot.message_handler(func=lambda m: m.text == "üíé –ü—Ä–µ–º–∏—É–º")
@require_registration
def premium_info(message):
    user_id = str(message.chat.id)
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("1 –º–µ—Å—è—Ü ‚Äî 50‚≠ê", callback_data="buy_premium:1m"),
        types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ ‚Äî 120‚≠ê", callback_data="buy_premium:3m"),
        types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî 300‚≠ê", callback_data="buy_premium:life")
    )
    bot.send_message(
        user_id,
        "üíé *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚Ä¢ –í–∏–¥–µ—Ç—å –≤—Å–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏\n"
        "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ üëá",
        parse_mode="Markdown",
        reply_markup=kb
    )


# --- –í–´–ë–û–† –¢–ê–†–ò–§–ê ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_premium:"))
def buy_tariff(call):
    user_id = str(call.from_user.id)
    tariff = call.data.split(":")[1]

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_premium:{tariff}"))

    bot.send_message(
        user_id,
        f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ *{tariff}* –ø–µ—Ä–µ–≤–µ–¥–∏ –∑–≤—ë–∑–¥—ã –Ω–∞ @abonentan ‚ú®\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        parse_mode="Markdown",
        reply_markup=kb
    )


# ---------- –ö–û–ú–ê–ù–î–ê –ü–†–û–í–ï–†–ö–ò ----------
@bot.message_handler(commands=['mypremium'])
def mypremium(message):
    user_id = str(message.chat.id)
    if check_premium(user_id):
        end_date = users[user_id]["premium_until"]
        bot.send_message(message.chat.id, f"‚ú® –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–µ–Ω Premium –¥–æ {end_date}")
    else:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç Premium. –ö—É–ø–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.")


# --- –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–ü–õ–ê–¢–´ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_premium:"))
def confirm_premium(call):
    user_id = str(call.from_user.id)
    tariff = call.data.split(":")[1]

    users[user_id]["premium"] = True
    users[user_id]["premium_until"] = "lifetime" if tariff == "life" else tariff
    save_data()

    bot.send_message(user_id, "üéâ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üíé")

# ---------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ----------
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    if user_id not in users or users[user_id].get("step") != "done":
        users[user_id] = {}  # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∞–Ω–∫–µ—Ç—É
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòä\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=main_menu(user_id))

def get_name(message):
    user_id = str(message.chat.id)
    users[user_id] = {
        "name": message.text,
        "username": message.from_user.username  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º username
    }
    save_data()
    bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, get_age)

def get_age(message):
    user_id = str(message.chat.id)
    if message.text and message.text.isdigit():
        age = int(message.text)
        if 0 < age <= 100:
            users[user_id]["age"] = age
            save_data()
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            button_geo = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
            keyboard.add(button_geo)
            bot.send_message(user_id, "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? (–º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é)", reply_markup=keyboard)
            bot.register_next_step_handler(message, get_city)
            return
    bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 1 –¥–æ 100")
    bot.register_next_step_handler(message, get_age)



def get_city(message):
    user_id = str(message.chat.id)
    if message.content_type == "location":
        lat = message.location.latitude
        lon = message.location.longitude
        users[user_id]["city"] = f"üìç {lat:.4f}, {lon:.4f}"  
        save_data()
        bot.send_message(user_id, "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚úçÔ∏è", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_about)
        return

    if message.text and re.match(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+$", message.text):
        users[user_id]["city"] = message.text.strip()
        save_data()
        bot.send_message(user_id, "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚úçÔ∏è", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_about)
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã).")
        bot.register_next_step_handler(message, get_city)

def get_about(message):
    user_id = str(message.chat.id)
    users[user_id]["about"] = message.text
    save_data()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    bot.send_message(user_id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã üì∏\n(–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª)", reply_markup=keyboard)
    bot.register_next_step_handler(message, get_photo)

def get_photo(message):
    user_id = str(message.chat.id)
    if message.content_type == "photo":
        users[user_id]["photo"] = message.photo[-1].file_id
        users[user_id]["step"] = "done"
        save_data()
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu(user_id))
        return

    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        users[user_id]["photo"] = None
        users[user_id]["step"] = "done"
        save_data()
        bot.send_message(user_id, "–•–æ—Ä–æ—à–æ, –±–µ–∑ —Ñ–æ—Ç–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ üôÇ\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu(user_id))
        return

    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª üôÇ")
    bot.register_next_step_handler(message, get_photo)


# ---------- –ü–†–û–§–ò–õ–¨ –ò –ü–û–ò–°–ö ----------
def profile_keyboard(user_id):
    keyboard = types.InlineKeyboardMarkup()
    like_btn = types.InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{user_id}")
    keyboard.add(types.InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=f"ask:{user_id}"))
    next_btn = types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next")
    keyboard.add(like_btn, next_btn)
    return keyboard



def show_profile(chat_id, user_id, viewer_id=None):
    data = users.get(str(user_id), {})
    if not data:
        bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    premium_icon = "üíé " if data.get("premium") else ""
    caption = (
        f"{premium_icon}üë§ –ò–º—è: {data.get('name', '-')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '?')} –ª–µ—Ç\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data.get('city', '-')}\n"
        f"üìù –û —Å–µ–±–µ:\n{data.get('about', '-')}"
    )

    # –ö–Ω–æ–ø–∫–∏
    if viewer_id and str(viewer_id) == str(user_id):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚¨ÖÔ∏è –í –º–µ–Ω—é")
    else:
        kb = profile_keyboard(user_id)  # –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

    photo = data.get("photo")
    if photo:
        bot.send_photo(chat_id, photo, caption=caption, reply_markup=kb)
    else:
        bot.send_message(chat_id, caption, reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("ask:"))
def callback_ask_question(call):
    target_id = call.data.split(":")[1]  # –∫–æ–º—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    asker_id = str(call.from_user.id)

    pending_questions[asker_id] = target_id
    msg = bot.send_message(asker_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, process_question)

def process_question(message):
    asker_id = str(message.from_user.id)
    if asker_id not in pending_questions:
        bot.send_message(asker_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    target_id = pending_questions.pop(asker_id)
    question_text = message.text

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data=f"answer:{asker_id}:anon"),
        types.InlineKeyboardButton("üë§ –û—Ç–≤–µ—Ç–∏—Ç—å —Å –∏–º–µ–Ω–µ–º", callback_data=f"answer:{asker_id}:named")
    )

    bot.send_message(
        target_id,
        f"‚ùì –í–∞–º –ø—Ä–∏—à—ë–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n\n{question_text}",
        reply_markup=keyboard
    )
    bot.send_message(asker_id, "‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# ---------- –û–¢–í–ï–¢–´ ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def callback_answer_question(call):
    _, target_id, mode = call.data.split(":")  # target_id = –∫—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
    responder_id = str(call.from_user.id)

    pending_answers[responder_id] = (target_id, mode)
    msg = bot.send_message(responder_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")
    bot.register_next_step_handler(msg, process_answer)

def process_answer(message):
    responder_id = str(message.from_user.id)
    if responder_id not in pending_answers:
        bot.send_message(responder_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")
        return

    target_id, mode = pending_answers.pop(responder_id)
    text = message.text
    responder_name = message.from_user.first_name

    if mode == "anon":
        answer_text = f"üì© –í–∞–º –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç (–∞–Ω–æ–Ω–∏–º–Ω–æ):\n\n{text}"
    else:
        answer_text = f"üì© –í–∞–º –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç –æ—Ç {responder_name}:\n\n{text}"

    bot.send_message(target_id, answer_text)
    bot.send_message(responder_id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# ---------- –ü–û–ò–°–ö ----------
@bot.message_handler(func=lambda m: m.text == "üîç –ü–æ–∏—Å–∫")
@require_registration
def search(message):
    user_id = str(message.chat.id)
    candidates = [uid for uid in users if uid != user_id]
    if not candidates:
        bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ üôÇ")
        return
    if user_id not in likes:
        likes[user_id] = []
    for candidate_id in candidates:
        if candidate_id not in likes[user_id]:
            show_profile(user_id, candidate_id)
            return
    bot.send_message(user_id, "–¢—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –∞–Ω–∫–µ—Ç—ã ü§∑")


# ---------- –õ–ê–ô–ö–ò ----------


# ---------- ‚ù§Ô∏è –ú–æ–∏ –ª–∞–π–∫–∏ ----------
# –ú–æ–∏ –ª–∞–π–∫–∏
@bot.message_handler(func=lambda m: m.text == "‚ù§Ô∏è –ú–æ–∏ –ª–∞–π–∫–∏")
def my_likes(message):
    user_id = str(message.chat.id)
    liked_users = likes.get(user_id, [])

    if not liked_users:
        bot.send_message(user_id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ª–∞–π–∫–æ–≤.")
        return

    keyboard = types.InlineKeyboardMarkup()
    for uid in liked_users:
        data = users.get(str(uid), {})
        name = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        username = data.get("username")

        if username:  # –µ—Å–ª–∏ –µ—Å—Ç—å username ‚Üí —Å—Å—ã–ª–∫–∞
            btn = types.InlineKeyboardButton(text=name, url=f"https://t.me/{username}")
        else:  # –µ—Å–ª–∏ username –Ω–µ—Ç ‚Üí –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID
            btn = types.InlineKeyboardButton(text=f"{name} (–Ω–µ—Ç username)", callback_data=f"show_id_{uid}")

        keyboard.add(btn)

    bot.send_message(user_id, "–¢–≤–æ–∏ –ª–∞–π–∫–∏:", reply_markup=keyboard)



@bot.message_handler(func=lambda m: m.text == "‚≠ê –ö—Ç–æ –ª–∞–π–∫–Ω—É–ª –º–µ–Ω—è")
def liked_me(message):
    user_id = str(message.chat.id)
    who_liked = [uid for uid, liked in likes.items() if user_id in liked]

    if not who_liked:
        bot.send_message(user_id, "–¢–µ–±—è –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª.")
        return

    keyboard = types.InlineKeyboardMarkup()
    for uid in who_liked:
        data = users.get(str(uid), {})
        name = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –ø—Ä–µ–º–∏—É–º–∞
        if data.get("premium"):
            name = f"üíé {name}"

        username = data.get("username")
        if username:
            btn = types.InlineKeyboardButton(text=name, url=f"https://t.me/{username}")
        else:
            btn = types.InlineKeyboardButton(text=f"{name} (–Ω–µ—Ç username)", callback_data=f"show_id_{uid}")

    keyboard.add(btn)

    bot.send_message(user_id, "–¢–≤–æ–∏ –ø–æ–∫–ª–æ–Ω–Ω–∏–∫–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ username (–ø–æ–∫–∞–∑ ID)
@bot.callback_query_handler(func=lambda call: call.data.startswith("show_id_"))
def callback_show_id(call):
    uid = call.data.split("_")[2]
    bot.answer_callback_query(call.id, text=f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {uid}")




# ---------- –ü–û–ö–ê–ó –ü–†–û–§–ò–õ–Ø –ò–ó "–ö–¢–û –õ–ê–ô–ö–ù–£–õ –ú–ï–ù–Ø" ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("show_"))
def show_fan_profile(call):
    user_id = str(call.message.chat.id)
    target_id = call.data.split("_")[1]
    show_profile(user_id, target_id)

# ---------- –ú–û–ô –ü–†–û–§–ò–õ–¨ ----------
@bot.message_handler(func=lambda m: m.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
@require_registration
def my_profile(message):
    user_id = str(message.chat.id)
    show_profile(user_id, user_id, viewer_id=user_id)
    


# ---------- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ----------
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
@require_registration
def edit_profile(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç")
    kb.add("üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
    kb.add("üìñ –ò–∑–º–µ–Ω–∏—Ç—å '–û —Å–µ–±–µ'")
    kb.add("‚¨ÖÔ∏è –í –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)

# ---------- –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ----------
def set_step(user_id, step):
    users[user_id]["step"] = step
    save_data()

@bot.message_handler(func=lambda m: m.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
@require_registration
def change_name(message):
    set_step(str(message.chat.id), "edit_name")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:")

@bot.message_handler(func=lambda m: users.get(str(m.chat.id), {}).get("step") == "edit_name")
def save_name(message):
    user_id = str(message.chat.id)
    users[user_id]["name"] = message.text
    set_step(user_id, "done")
    save_data()
    bot.send_message(message.chat.id, "‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

@bot.message_handler(func=lambda m: m.text == "üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç")
@require_registration
def change_age(message):
    set_step(str(message.chat.id), "edit_age")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")

@bot.message_handler(func=lambda m: users.get(str(m.chat.id), {}).get("step") == "edit_age")
def save_age(message):
    user_id = str(message.chat.id)
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    users[user_id]["age"] = int(message.text)
    set_step(user_id, "done")
    bot.send_message(message.chat.id, "‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.message_handler(func=lambda m: m.text == "üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
@require_registration
def change_city(message):
    set_step(str(message.chat.id), "edit_city")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")

@bot.message_handler(func=lambda m: users.get(str(m.chat.id), {}).get("step") == "edit_city")
def save_city(message):
    user_id = str(message.chat.id)
    users[user_id]["city"] = message.text
    set_step(user_id, "done")
    bot.send_message(message.chat.id, "‚úÖ –ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!")

@bot.message_handler(func=lambda m: m.text == "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
@require_registration
def change_photo(message):
    set_step(str(message.chat.id), "edit_photo")
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")

@bot.message_handler(content_types=["photo"])
def save_photo(message):
    user_id = str(message.chat.id)
    if users.get(user_id, {}).get("step") == "edit_photo":
        users[user_id]["photo"] = message.photo[-1].file_id
        set_step(user_id, "done")
        bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

@bot.message_handler(func=lambda m: m.text == "üìñ –ò–∑–º–µ–Ω–∏—Ç—å '–û —Å–µ–±–µ'")
@require_registration
def change_about(message):
    set_step(str(message.chat.id), "edit_about")
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

@bot.message_handler(func=lambda m: users.get(str(m.chat.id), {}).get("step") == "edit_about")
def save_about(message):
    user_id = str(message.chat.id)
    users[user_id]["about"] = message.text
    set_step(user_id, "done")
    bot.send_message(message.chat.id, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "‚¨ÖÔ∏è –í –ú–ï–ù–Æ" ----------
@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
@require_registration
def back_to_menu(message):
    user_id = str(message.chat.id)
    bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(user_id))

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –õ–ê–ô–ö–û–í ----------
@bot.callback_query_handler(func=lambda call: call.data.startswith("like_"))
def like_profile(call):
    user_id = str(call.message.chat.id)
    target_id = call.data.split("_")[1]

    likes.setdefault(user_id, []).append(target_id)

    target = users.get(target_id, {})
    me = users.get(user_id, {})

    # --- —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω—è ---
    if call.from_user.username:
        me_link = f'<a href="https://t.me/{call.from_user.username}">{me.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}</a>'
    else:
        me_link = f'<a href="tg://user?id={user_id}">{me.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}</a>'

    # --- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
    bot.send_message(
        target_id,
        f"üíå –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å {me_link}!",
        parse_mode="HTML"
    )

    # --- –µ—Å–ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ ---
    if user_id in likes.get(target_id, []):
        if call.from_user.username:
            target_link = f'<a href="https://t.me/{call.from_user.username}">{target.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}</a>'
        else:
            target_link = f'<a href="tg://user?id={target_id}">{target.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")}</a>'

        bot.send_message(user_id, f"üéâ –£ —Ç–µ–±—è –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å {target_link}!", parse_mode="HTML")
        bot.send_message(target_id, f"üéâ –£ —Ç–µ–±—è –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å {me_link}!", parse_mode="HTML")

    search(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "next")
def next_profile(call):
    search(call.message)

@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    # –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ next_step_handler ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if message.text.startswith("/"):  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /menu")

# ---------- –ó–ê–ü–£–°–ö –ë–û–¢–ê ----------
load_data()
bot.polling(none_stop=True)
